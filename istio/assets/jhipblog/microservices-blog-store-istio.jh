
/*
 * This is a microservice Blog sample with Gateway and two microservice applications
 * This uses JHipster registry for service discovery and OIDC authentication
 */
 
application {
  config {
    baseName gateway,
    packageName com.sapient.developer.gateway,
    applicationType gateway,
    authenticationType jwt,
    prodDatabaseType mysql,
    searchEngine elasticsearch,
    serviceDiscoveryType no,
    testFrameworks [protractor]
  }
  entities Blog, Post, Tag, Product
}

application {
  config {
    baseName blog,
    packageName com.sapient.developer.blog,
    applicationType microservice,
    authenticationType jwt,
    prodDatabaseType mysql,
    searchEngine elasticsearch,
    serverPort 8081,
    serviceDiscoveryType no,
    testFrameworks [gatling]
  }
  entities Blog, Post, Tag
}

application {
  config {
    baseName store,
    packageName com.sapient.developer.store,
    applicationType microservice,
    authenticationType jwt,
    prodDatabaseType mysql,
    enableHibernateCache false,
    searchEngine elasticsearch,
    serverPort 8082,
    serviceDiscoveryType no,
    testFrameworks [gatling]
  }
  entities Product
}

entity Blog {
  name String required minlength(3),
  handle String required minlength(2)
}

entity Post {
  title String required,
  content TextBlob required,
  date Instant required
}

entity Tag {
  name String required minlength(2)
}

entity Product {
  title String required,
  price BigDecimal required min(0),
  image ImageBlob
}

relationship ManyToOne {
  Post{blog(name)} to Blog
}

relationship ManyToMany {
  Post{tag(name)} to Tag{post}
}

paginate Post, Tag with infinite-scroll
paginate Product with pagination

microservice Product with store
microservice Blog, Post, Tag with blog

/**
 * Deployments
 */

deployment {
  deploymentType kubernetes
  appsFolders [gateway, blog, store]
  dockerRepositoryName "adhulappanavar"
  serviceDiscoveryType no
  istio true
  kubernetesServiceType Ingress
  kubernetesNamespace jhipster
  ingressDomain "34.89.20.232.nip.io"
}